generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Products {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  v               Int?       @map("__v")
  available       Int
  categoryId      Int
  categoryName    String
  description     String
  discount        Float
  imgURL          String
  name            String     @unique(map: "name_1")
  popularity      Int
  price           Int
  rating          Float
  subCategoryId   Int?
  subCategoryName String?
  favorites       Favorite[]
  userCarts       UserCart[]
  comments        Comment[]
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String       @unique
  emailVerified DateTime?
  password      String?
  image         String?
  address       Address?
  accounts      Account[]
  sessions      Session[]
  favorites     Favorite[]
  capsOrders    CapsOrder[]
  userCarts     UserCart[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  userOrders    UserOrders[]
  comments      Comment[]
}

type Address {
  street          String
  addressOptional String?
  city            String
  state           String
  zipCode         String
}

model Favorite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, productId], name: "userId_productId")
}

model CapsOrder {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String?  @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  quantity  Int
  usdValue  Float
  createdAt DateTime @default(now())

  @@index([userId])
}

model UserOrders {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  userId          String?     @db.ObjectId
  user            User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  street          String
  addressOptional String?
  city            String
  state           String
  zipCode         String
  shippingMethod  String
  orderDate       DateTime    @default(now())
  totalAmount     Float
  orderItems      OrderItem[]
}

model OrderItem {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  orderId    String      @db.ObjectId
  order      UserOrders  @relation(fields: [orderId], references: [id], onDelete: Restrict)
  productId  String      @db.ObjectId
  name       String
  price      Int
  quantity   Int
}

model UserCart {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId], name: "userId_productId_cart")
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Comment {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  rating      Int
  userId      String?   @db.ObjectId
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  authorName  String    
  product     Products  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String    @db.ObjectId
  createdAt   DateTime  @default(now())
}
